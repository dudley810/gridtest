@page "/"
@using GridTest.Shared
@using System.Reflection
@inject HttpClient Http
@inject Blazored.Toast.Services.IToastService ts;

<h1>Blazorise RowInserting & RowUpdating Tester</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>Put reject in the summary to simulate failed api call</p>
    <br>
    <br>
    <Button Class="btn btn-danger" Clicked="TESTFORDELETE">DELETE TEST</Button>
    <br>
    <DataGrid TItem="WeatherForecast"
              Data="@forecasts" Editable="true" ShowPager="true" PageSize="25"
              EditMode="DataGridEditMode.Popup" PagerPosition="DataGridPagerPosition.TopAndBottom"
              RowInserting="RowInserting" Bordered="true" Filterable="false" ShowPageSizes="true"
              RowUpdating="RowUpdating" Sortable="true"  SortMode="DataGridSortMode.Single"
              RowRemoving="RowRemoving"
              UseInternalEditing="false">
        <EmptyTemplate>
            <p class="-text--h4">NO WEATHER</p>
        </EmptyTemplate>
        <PopupTitleTemplate>
            @if (context.EditState == DataGridEditState.Edit)
            {
                @($"{context.LocalizationString} Weather {context.Item.key}")
            }
            else
            {
                @($"{context.LocalizationString} Weather")
            }
        </PopupTitleTemplate>
        <DataGridColumns>
            <DataGridCommandColumn TItem="WeatherForecast">
                <NewCommandTemplate>
                    <Button Color="Color.Success" Clicked="@context.Clicked">New</Button>
                </NewCommandTemplate>
                <EditCommandTemplate>
                    <Button Color="Color.Primary" Clicked="@context.Clicked">Edit</Button>
                </EditCommandTemplate>
            </DataGridCommandColumn>

            <DataGridColumn TItem="WeatherForecast" Field="@nameof(WeatherForecast.key)" Caption="Key" />
            <DataGridColumn TItem="WeatherForecast" Field="@nameof(WeatherForecast.Date)" Caption="Date" Editable="true" />
            <DataGridColumn TItem="WeatherForecast" Field="@nameof(WeatherForecast.TemperatureC)" Caption="Temp C" Editable="true" />
            <DataGridColumn TItem="WeatherForecast" Field="@nameof(WeatherForecast.TemperatureF)" Caption="Temp F" Editable="true" />
            <DataGridColumn TItem="WeatherForecast" Field="@nameof(WeatherForecast.Summary)" Caption="Summary" Editable="true" />
        </DataGridColumns>
    </DataGrid>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
    }

    //HOW DO YOU GET THE CURRENT NEWLY ADDED VALUES HERE?
    protected async Task RowInserting(CancellableRowChange<WeatherForecast, Dictionary<string, object>> e)
    {
        if (e.NewItem.Summary == "reject")
        {
            ts.ShowError("REJECTED - Inserting row");
            e.Cancel = true;
        }
        else
        {
            await Http.PostAsJsonAsync("WeatherForecast", e.NewItem);
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        }
    }

    //HOW DO YOU GET THE CURRENT EDIT VALUES HERE?
    protected async Task RowUpdating(CancellableRowChange<WeatherForecast, Dictionary<string, object>> e)
    {
        if (e.NewItem.Summary == "reject")
        {
            ts.ShowError("REJECTED - Updating row");
            e.Cancel = true;
        }
        else
        {
            await Http.PutAsJsonAsync("WeatherForecast", e.NewItem);
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        }
    }

    protected async Task TESTFORDELETE()
    {
        WeatherForecast u = new WeatherForecast();
        u.Date = "test";
        u.TemperatureC = "for";
        u.TemperatureF = "delete";
        u.Summary = "reject";
        await Http.PostAsJsonAsync("WeatherForecast", u);
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>
            ("WeatherForecast");
    }

    protected async Task RowRemoving(CancellableRowChange<WeatherForecast>
        e)
    {
        if (e.NewItem.Summary == "reject")
        {
            ts.ShowError("REJECTED - Removing row");
            e.Cancel = true;
        }
        else
        {
            await Http.DeleteAsync("WeatherForecast" + "?key=" + e.NewItem.key);
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>
                ("WeatherForecast");
        }
    }
}