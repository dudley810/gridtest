@page "/"
@using GridTest.Shared
@inject HttpClient Http
@inject Blazored.Toast.Services.IToastService ts;

<h1>Blazorise RowInserting & RowUpdating Tester</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
<p>Put reject in the summary to simulate failed api call</p>
<br>
 <Button Clicked="TESTFORDELETE">DELETE TEST</Button>
 <br>
<DataGrid TItem="WeatherForecast"
          Data="@forecasts" Editable="true"
          EditMode="DataGridEditMode.Popup"
          RowInserting="RowInserting"
          RowUpdating="RowUpdating"
          RowRemoving="RowRemoving"
          UseInternalEditing="false">

    <DataGridCommandColumn TItem="WeatherForecast">
        <NewCommandTemplate>
            <Button Color="Color.Success" Clicked="@context.Clicked">New</Button>
        </NewCommandTemplate>
        <EditCommandTemplate>
            <Button Color="Color.Primary" Clicked="@context.Clicked">Edit</Button>
        </EditCommandTemplate>
    </DataGridCommandColumn>
    <DataGridColumn TItem="WeatherForecast" Field="@nameof(WeatherForecast.key)" Caption="Key" Editable="false"/>
    <DataGridColumn TItem="WeatherForecast" Field="@nameof(WeatherForecast.Date)" Caption="Date" Editable="true" />
    <DataGridColumn TItem="WeatherForecast" Field="@nameof(WeatherForecast.TemperatureC)" Caption="Temp C" Editable="true" />
    <DataGridColumn TItem="WeatherForecast" Field="@nameof(WeatherForecast.TemperatureF)" Caption="Temp F" Editable="true" />
    <DataGridColumn TItem="WeatherForecast" Field="@nameof(WeatherForecast.Summary)" Caption="Summary" Editable="true" />
</DataGrid>
}

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
    }

    //protected async Task AddRow(SavedRowItem<WeatherForecast, Dictionary<string, object>> e)
    //{
    //    if (e.Item.Summary == "reject")
    //    {
    //        Console.WriteLine("REJECTED");
    //    }
    //    else
    //    {
    //        await Http.PostAsJsonAsync("WeatherForecast", e.Item);
    //        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
    //    }
    //}

    //HOW DO YOU GET THE CURRENT NEWLY ADDED VALUES HERE?
    protected async Task RowInserting(CancellableRowChange<WeatherForecast, Dictionary<string, object>> e)
    {
        WeatherForecast u = new WeatherForecast();
        u.Date = (string)e.Values["Date"]; //IS THERE A EASIER WAY TO GET THE CURRENT VALUES
        u.TemperatureC = (string)e.Values["TemperatureC"]; //IS THERE A EASIER WAY TO GET THE CURRENT VALUES
        u.TemperatureF = (string)e.Values["TemperatureF"]; //IS THERE A EASIER WAY TO GET THE CURRENT VALUES
        u.Summary = (string)e.Values["Summary"]; //IS THERE A EASIER WAY TO GET THE CURRENT VALUES

        if (u.Summary == "reject")
        {
            ts.ShowError("REJECTED", "Inserting row");
            e.Cancel = true;
        }
        else
        {
            await Http.PostAsJsonAsync("WeatherForecast", u);
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        }
    }

    //HOW DO YOU GET THE CURRENT EDIT VALUES HERE?
    protected async Task RowUpdating(CancellableRowChange<WeatherForecast, Dictionary<string, object>> e)
    {
        WeatherForecast u = new WeatherForecast();
        u.key = e.Item.key; // these are the old values
        u.Date = (string)e.Values["Date"]; //IS THERE A EASIER WAY TO GET THE CURRENT VALUES
        u.TemperatureC = (string)e.Values["TemperatureC"]; //IS THERE A EASIER WAY TO GET THE CURRENT VALUES
        u.TemperatureF = (string)e.Values["TemperatureF"]; //IS THERE A EASIER WAY TO GET THE CURRENT VALUES
        u.Summary = (string)e.Values["Summary"]; //IS THERE A EASIER WAY TO GET THE CURRENT VALUES

        if (u.Summary == "reject")
        {
            ts.ShowError("REJECTED", "Updating row");
            e.Cancel = true;
        }
        else
        {
            await Http.PutAsJsonAsync("WeatherForecast", u);
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        }
    }

    protected async Task TESTFORDELETE()
    {
        WeatherForecast u = new WeatherForecast();
        u.Date = "test";
        u.TemperatureC = "for";
        u.TemperatureF = "delete";
        u.Summary = "reject";
        await Http.PostAsJsonAsync("WeatherForecast", u);
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
    }

    protected async Task RowRemoving(CancellableRowChange<WeatherForecast> e)
    {
        if (e.Item.Summary == "reject")
        {
            ts.ShowError("REJECTED", "Removing row");
            e.Cancel = true;
        }
        else
        {
            await Http.DeleteAsync("WeatherForecast" + "?key=" + e.Item.key);
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        }
    }

}
